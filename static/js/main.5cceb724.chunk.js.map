{"version":3,"sources":["components/layout/Header.js","context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","branding","className","href","to","defaultProps","Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","response","this","data","value","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","delete","name","email","phone","onClick","style","cursor","float","color","bind","marginRight","Contacts","Fragment","key","TextInputGroup","label","placeholder","onChange","error","htmlFor","classNames","AddContact","errors","onSubmit","e","preventDefault","newContact","post","history","push","target","EditContact","updateContact","match","params","put","Test","title","body","fetch","then","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5cceb724.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const {branding} = props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"></i> Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\"></i> Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\"></i> About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n};\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React, {Component} from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'DELETE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(\r\n                    contact => contact.id !== action.payload\r\n                )\r\n            };\r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            };\r\n        case \"UPDATE_CONTACT\":\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ?\r\n                    (contact = action.payload) : contact)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [],\r\n        dispatch: (action) => this.setState((state) => reducer(state, action)),\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await axios.get(\r\n            \"https://jsonplaceholder.typicode.com/users\"\r\n        );\r\n\r\n        this.setState({contacts: response.data});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;","import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from \"../../context\";\r\nimport axios from \"axios\";\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: false,\r\n    };\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        try {\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n            dispatch({type: \"DELETE_CONTACT\", payload: id});\r\n        } catch (e) {\r\n            dispatch({type: \"DELETE_CONTACT\", payload: id});\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {id, name, email, phone} = this.props.contact;\r\n        const {showContactInfo} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}{\" \"}\r\n                                <i\r\n                                    onClick={() =>\r\n                                        this.setState({\r\n                                            showContactInfo: !this.state.showContactInfo,\r\n                                        })\r\n                                    }\r\n                                    className=\"fas fa-sort-down\"\r\n                                    style={{cursor: \"pointer\"}}\r\n                                ></i>\r\n                                <i\r\n                                    className=\"fas fa-times\"\r\n                                    style={{cursor: \"pointer\", float: \"right\", color: \"red\"}}\r\n                                    onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                                ></i>\r\n                                <Link to={`contact/edit/${id}`}>\r\n                                    <i\r\n                                        className=\"fas fa-pencil-alt\"\r\n                                        style={{\r\n                                            cursor: \"pointer\",\r\n                                            float: \"right\",\r\n                                            color: \"black\",\r\n                                            marginRight: \"1rem\",\r\n                                        }}\r\n                                    ></i>\r\n                                </Link>\r\n                            </h4>\r\n                            {showContactInfo ? (\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Email: {email}</li>\r\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>\r\n                            ) : null}\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;","import React, {Component} from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport {Consumer} from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {contacts} = value;\r\n                    return (\r\n                        <React.Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span> List\r\n                            </h1>\r\n                            {contacts.map(contact => (\r\n                                <Contact\r\n                                    key={contact.id}\r\n                                    contact={contact}\r\n                                />\r\n                            ))}\r\n                        </React.Fragment>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\n\nconst TextInputGroup = ({\n                            label,\n                            name,\n                            value,\n                            placeholder,\n                            type,\n                            onChange,\n                            error\n                        }) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input\n                type={type}\n                name={name}\n                className={classNames(\"form-control form-control-lg\", {\"is-invalid\": error})}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n            />\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n    );\n};\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n};\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n};\n\nexport default TextInputGroup;","import React, {Component} from \"react\";\r\nimport {Consumer} from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    };\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const {name, email, phone} = this.state;\r\n\r\n        if (name === '') {\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if (email === '') {\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if (phone === '') {\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const newContact = {name: name, email: email, phone: phone};\r\n\r\n        const response = await axios.post(\r\n            \"https://jsonplaceholder.typicode.com/users\",\r\n            newContact\r\n        );\r\n\r\n        dispatch({type: \"ADD_CONTACT\", payload: response.data});\r\n\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        onChange={this.onChange}\r\n                                        value={name}\r\n                                        placeholder=\"Enter Name\"\r\n                                        name=\"name\"\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        type=\"email\"\r\n                                        onChange={this.onChange}\r\n                                        value={email}\r\n                                        placeholder=\"Enter Email\"\r\n                                        name=\"email\"\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        onChange={this.onChange}\r\n                                        value={phone}\r\n                                        placeholder=\"Enter Phone\"\r\n                                        name=\"phone\"\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Add Contact\"\r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React, {Component} from \"react\";\r\nimport {Consumer} from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors: {},\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const {id} = this.props.match.params;\r\n        const response = await axios.get(\r\n            `https://jsonplaceholder.typicode.com/users/${id}`\r\n        );\r\n        const contact = response.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone,\r\n        });\r\n    }\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n\r\n        const {name, email, phone} = this.state;\r\n\r\n        if (name === \"\") {\r\n            this.setState({errors: {name: \"Name is required\"}});\r\n            return;\r\n        }\r\n\r\n        if (email === \"\") {\r\n            this.setState({errors: {email: \"Email is required\"}});\r\n            return;\r\n        }\r\n\r\n        if (phone === \"\") {\r\n            this.setState({errors: {phone: \"Phone is required\"}});\r\n            return;\r\n        }\r\n\r\n        const updateContact = {\r\n            name: name,\r\n            email: email,\r\n            phone: phone\r\n        };\r\n        const {id} = this.props.match.params;\r\n        const response = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact);\r\n\r\n        dispatch({type: \"UPDATE_CONTACT\", payload: response.data});\r\n\r\n        this.setState({\r\n            name: \"\",\r\n            email: \"\",\r\n            phone: \"\",\r\n            errors: {},\r\n        });\r\n\r\n        this.props.history.push(\"/\");\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    render() {\r\n        const {name, email, phone, errors} = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {(value) => {\r\n                    const {dispatch} = value;\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Edit Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <TextInputGroup\r\n                                        label=\"Name\"\r\n                                        onChange={this.onChange}\r\n                                        value={name}\r\n                                        placeholder=\"Enter Name\"\r\n                                        name=\"name\"\r\n                                        error={errors.name}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Email\"\r\n                                        type=\"email\"\r\n                                        onChange={this.onChange}\r\n                                        value={email}\r\n                                        placeholder=\"Enter Email\"\r\n                                        name=\"email\"\r\n                                        error={errors.email}\r\n                                    />\r\n                                    <TextInputGroup\r\n                                        label=\"Phone\"\r\n                                        onChange={this.onChange}\r\n                                        value={phone}\r\n                                        placeholder=\"Enter Phone\"\r\n                                        name=\"phone\"\r\n                                        error={errors.phone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"submit\"\r\n                                        value=\"Update Contact\"\r\n                                        className=\"btn btn-light btn-block\"\r\n                                    />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from \"react\";\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">Simple app to manage contacts</p>\n            <p className=\"text-secondary\">Version 1.0.</p>\n        </div>\n    );\n};","import React from 'react';\r\n\r\nexport default () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    );\r\n};","import React, {Component} from \"react\";\r\n\r\nclass Test extends Component {\r\n    state = {\r\n        title: '',\r\n        body: ''\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                this.setState({\r\n                    title: data.title,\r\n                    body: data.body\r\n                });\r\n            });\r\n    }\r\n\r\n    /**componentWillMount() {\r\n        console.log('componentWillMount...');\r\n    }\r\n\r\n     componentDidUpdate(prevProps, prevState) {\r\n        console.log('componentDidUpdate...');\r\n    }\r\n\r\n     componentWillUpdate(nextProps, nextState) {\r\n        console.log('componentWillUpdate...');\r\n    }\r\n\r\n     componentWillReceiveProps(nextProps) {\r\n        console.log('componentWillReceiveProps...');\r\n    }\r\n\r\n     static getDerivedStateFromProps(nextProps, prevState) {\r\n        return null;\r\n    }\r\n\r\n     getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        console.log('getSnapshotBeforeUpdate...');\r\n    }**/\r\n\r\n    render() {\r\n        const {title, body} = this.state;\r\n        return (\r\n            <div>\r\n                <h1>{title}</h1>\r\n                <p>{body}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Header from \"./components/layout/Header\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport About from \"./components/pages/About\";\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/test/Test';\n\nimport {Provider} from \"./context\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Provider>\n                <Router>\n                    <div className=\"App\">\n                        <Header branding=\"Contact Manager\"/>\n                        <div className=\"container\">\n                            <Switch>\n                                <Route exact path=\"/\" component={Contacts}/>\n                                <Route exact path=\"/contact/add\" component={AddContact}/>\n                                <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n                                <Route exact path=\"/about\" component={About}/>\n                                <Route exact path=\"/test\" component={Test}/>\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}